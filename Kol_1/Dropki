package KolokviumskaNP;

import java.util.Scanner;

class ZeroDenominatorException extends Exception{
    public ZeroDenominatorException(String message) {
        super(message);
    }
}
class GenericFraction<T extends Number,U extends Number>{
    T numerator;
    U denominator;

    public GenericFraction(T numerator, U denominator) throws ZeroDenominatorException {
        if(denominator.intValue() == 0) throw new ZeroDenominatorException("Denominator cannot be zero\n");
        else{
            this.numerator = numerator;
            this.denominator = denominator;
        }
    }


    GenericFraction<Double, Double> add(GenericFraction<? extends Number, ? extends Number> gf) throws ZeroDenominatorException {
        if(this.denominator.intValue() == gf.denominator.intValue()){ //imaat ist imenitel
            double broitel1 = this.numerator.doubleValue();
            double imenitel1 = this.denominator.doubleValue();
            double broitel2 = gf.numerator.doubleValue();
            double imenitel2 = gf.denominator.doubleValue();
            double rez = broitel1+broitel2;
            return new GenericFraction<Double,Double>(rez, imenitel1);
        }
        else{
            double imenitel1 = this.denominator.doubleValue();
            double imenitel2 = gf.denominator.doubleValue();
            double broitel1 = this.numerator.doubleValue() * imenitel2;
            double broitel2 = gf.numerator.doubleValue() * imenitel1;
            imenitel1*=imenitel2; //za dvete e istiot imenitel
            return new GenericFraction<Double,Double>(broitel1+broitel2, imenitel1);
        }
    }

    double toDouble(){
       return numerator.doubleValue()/denominator.doubleValue();
    }
    static double gcd(double a, double b) {
        if (b == 0)
            return a;
        if (a < b)
            return gcd(a, b - a);
        else
            return gcd(b, a - b);
    }
    public double gcd() {
        return gcd(this.numerator.doubleValue(), this.denominator.doubleValue());
    }
    @Override
    public String toString() {
        double gcd = this.gcd();
        return String.format("%.2f / %.2f", numerator.doubleValue()/gcd,denominator.doubleValue()/gcd);
    }

}



public class GenericFractionTest {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        double n1 = scanner.nextDouble();
        double d1 = scanner.nextDouble();
        float n2 = scanner.nextFloat();
        float d2 = scanner.nextFloat();
        int n3 = scanner.nextInt();
        int d3 = scanner.nextInt();
        try {
            GenericFraction<Double, Double> gfDouble = new GenericFraction<Double, Double>(n1, d1);
            GenericFraction<Float, Float> gfFloat = new GenericFraction<Float, Float>(n2, d2);
            GenericFraction<Integer, Integer> gfInt = new GenericFraction<Integer, Integer>(n3, d3);
            System.out.printf("%.2f\n", gfDouble.toDouble());
            System.out.println(gfDouble.add(gfFloat));
            System.out.println(gfInt.add(gfFloat));
            System.out.println(gfDouble.add(gfInt));
            gfInt = new GenericFraction<Integer, Integer>(n3, 0);
        } catch(ZeroDenominatorException e) {
            System.out.println(e.getMessage());
        }

        scanner.close();
    }

}

// вашиот код овде
