//package KolokviumskaNP;

import java.io.InputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.util.*;
import java.util.stream.Collectors;

public class F1Test {

    public static void main(String[] args) {
        F1Race f1Race = new F1Race();
        f1Race.readResults(System.in);
        f1Race.printSorted(System.out);
    }

}

class F1Race {
    List<Driver> drivers;
    public void readResults(InputStream in) {
        drivers = new ArrayList<>();
        Scanner scanner = new Scanner(in);
        while (scanner.hasNextLine()){
            String line = scanner.nextLine();
            Driver nov = new Driver(line);
            drivers.add(nov);
        }
        scanner.close();
    }

    public void printSorted(PrintStream out) {
        PrintWriter printWriter = new PrintWriter(out);

        List<Driver> sortedDrivers = drivers.stream().sorted(this::driverComparator).collect(Collectors.toList());


        for (int i = 0; i < sortedDrivers.size(); i++) {
            printWriter.println(String.format("%d. %-10s%10s", i + 1, sortedDrivers.get(i).name, sortedDrivers.get(i).string_lap()));
        }
        printWriter.flush();
    }

    public int driverComparator(Driver d1, Driver d2){
        Comparator<Lap> compareBymm = Comparator.comparing(Lap::getMm);
        Comparator<Lap> compareByss = Comparator.comparing(Lap::getSs);
        Comparator<Lap> compareBynnn = Comparator.comparing(Lap::getNnn);
        Comparator<Lap> compareFull = compareBymm.thenComparing(compareByss).thenComparing(compareBynnn);

        if(compareFull.compare(d1.bestLap, d2.bestLap)>0){
            return 1;
        }
        else return -1;
    }


    class Driver{
        String name;
        List<Lap> laps;
        Lap bestLap;

        public Driver(String line) {
            laps = new ArrayList<>();
            String [] lap;
            String [] podelena = line.split("\\s+");
            this.name = podelena[0];
            for (int i = 1; i < podelena.length; i++) {
                lap = podelena[i].split(":");
                Lap nov = new Lap(lap[0], lap[1], lap[2]);
                laps.add(nov);
            }

            setBestLap();
        }

        public void setBestLap() {
            Comparator<Lap> compareBymm = Comparator.comparing(Lap::getMm);
            Comparator<Lap> compareByss = Comparator.comparing(Lap::getSs);
            Comparator<Lap> compareBynnn = Comparator.comparing(Lap::getNnn);

            Comparator<Lap> compareFull = compareBymm.thenComparing(compareByss).thenComparing(compareBynnn);
            List<Lap> sorted = laps.stream().sorted(compareFull).collect(Collectors.toList());
            this.bestLap = sorted.get(0);
//            int indx = 0;
//            for (int i = 0; i < laps.size() - 1; i++) {
//                if(laps.get(i).compareTo(laps.get(i+1)) == 1){
//                    indx = i+1;
//                }
//            }
//            this.bestLap = laps.get(indx);

        }

        public Lap getBestLap() {
            return bestLap;
        }

        public String string_lap(){
            return String.format("%d:%02d:%03d",bestLap.mm,bestLap.ss, bestLap.nnn);
        }
    }
}
class Lap{
    int mm;
    int ss;
    int nnn;

    public Lap(String mm, String ss, String nnn) {
        this.mm = Integer.parseInt(mm);
        this.ss = Integer.parseInt(ss);
        this.nnn = Integer.parseInt(nnn);
    }

    public int compareTo(Lap lap){
        if(this.mm < lap.mm) return 1;
        else if(this.ss < lap.mm) return 1;
        else if (this.nnn < lap.nnn) { return  1;}
        return -1;
    }

    public int getMm() {
        return mm;
    }

    public int getSs() {
        return ss;
    }

    public int getNnn() {
        return nnn;
    }
}
