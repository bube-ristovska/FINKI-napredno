//package CodeFinki;

import java.time.LocalDateTime;
import java.util.*;
import java.util.stream.Collectors;
import java.util.stream.Stream;

class File implements Comparable<File>{
    String name;
    Integer size;
    LocalDateTime localDateTime;

    public File(String name, Integer size, LocalDateTime localDateTime) {
        this.name = name;
        this.size = size;
        this.localDateTime = localDateTime;
    }


    @Override
    public int compareTo(File o) {
        int i = localDateTime.compareTo(o.localDateTime);
        if(i == 0) {
            int j = name.compareTo(o.name);
            if(j == 0){
                return size.compareTo(o.size);
            }
            return j;
        }
        return i;
    }

    public Integer getSize() {
        return size;
    }

    public LocalDateTime getLocalDateTime() {
        return localDateTime;
    }
    public String toMonthDay() {
        return String.format("%s-%d", getLocalDateTime().getMonth(),
                getLocalDateTime().getDayOfMonth());
    }

    @Override
    public String toString() {
        return String.format("%-10s %5dB %s", name, size, localDateTime);
    }
}

class FileSystem{
    TreeMap<Character, TreeSet<File>> folderFileTreeMap; // folder-> tree set of files
    TreeSet<Character> folderTreeSet; //eden folder mozhe da se vika A, C, . itn
    TreeSet<File> allFiles;

    public FileSystem() {
        folderFileTreeMap = new TreeMap<>();
        allFiles = new TreeSet<>();
        folderTreeSet = new TreeSet<>();
    }

    public void addFile(char folder, String file, int size, LocalDateTime createdAt) {
        File f = new File(file, size, createdAt); //i da postoi isto samo kje go prebrishe
        if(folderTreeSet.contains(folder)){
            folderFileTreeMap.get(folder).add(f);

        }else {
            folderTreeSet.add(folder);
            TreeSet<File> treeSet = new TreeSet<>();
            treeSet.add(f);
            folderFileTreeMap.put(folder, treeSet);
        }
        allFiles.add(f);
    }
    public List<File> findAllHiddenFilesWithSizeLessThen(int size){
        List<File> hidden = new ArrayList<>();
        allFiles.forEach(a->{
            if(a.name.startsWith(".")) hidden.add(a);
        });
        return hidden;
       //return hidden.stream().sorted().collect(Collectors.toList());

    }
    public int totalSizeOfFilesFromFolders(List<Character> folders){
        int s = 0;
        for (Character folder : folders) {
            TreeSet<File> fold = folderFileTreeMap.get(folder);
            for (File file : fold) {
                s+=file.size;
            }
        }
        return s;
    }
    public Map<Integer, Set<File>> byYear(){ //враќа мапа Map во која за датотеките се групирани според годината на креирање.
        Comparator<File> comparator = Comparator.comparing(o -> o.size);
        Stream<File> sorted = allFiles.stream().sorted(comparator);
        return sorted.collect(
                        Collectors.groupingBy(
                                file -> file.localDateTime.getYear(),
                                Collectors.toSet())
                ); //pravenje na mapa od stream groupingBy
    }
//    public Map<String, Long> byMonthAndDay(){
//       return allFiles.stream()
//               .collect(Collectors.groupingBy(File::toMonthDay, Collectors.summingLong(File::getSize)));
//    }

    public Map<String, Long> sizeByMonthAndDay() {
        return allFiles.stream()
                .collect(Collectors.groupingBy(File::toMonthDay, Collectors.summingLong(File::getSize)));
    }
}


public class FileSystemTest {
    public static void main(String[] args) {
        FileSystem fileSystem = new FileSystem();
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        scanner.nextLine();
        for (int i = 0; i < n; i++) {
            String line = scanner.nextLine();
            String[] parts = line.split(":");
            fileSystem.addFile(parts[0].charAt(0), parts[1],
                    Integer.parseInt(parts[2]),
                    LocalDateTime.of(2016, 12, 29, 0, 0, 0).minusDays(Integer.parseInt(parts[3]))
            );
        }
        int action = scanner.nextInt();
        if (action == 0) {
            scanner.nextLine();
            int size = scanner.nextInt();
            System.out.println("== Find all hidden files with size less then " + size);
            List<File> files = fileSystem.findAllHiddenFilesWithSizeLessThen(size);
            files.forEach(System.out::println);
        } else if (action == 1) {
            scanner.nextLine();
            String[] parts = scanner.nextLine().split(":");
            System.out.println("== Total size of files from folders: " + Arrays.toString(parts));
            int totalSize = fileSystem.totalSizeOfFilesFromFolders(Arrays.stream(parts)
                    .map(s -> s.charAt(0))
                    .collect(Collectors.toList()));
            System.out.println(totalSize);
        } else if (action == 2) {
            System.out.println("== Files by year");
            Map<Integer, Set<File>> byYear = fileSystem.byYear();
            byYear.keySet().stream().sorted()
                    .forEach(key -> {
                        System.out.printf("Year: %d\n", key);
                        Set<File> files = byYear.get(key);
                        files.stream()
                                .sorted()
                                .forEach(System.out::println);
                    });
        } else if (action == 3) {
            System.out.println("== Size by month and day");
            Map<String, Long> byMonthAndDay = fileSystem.sizeByMonthAndDay();
            byMonthAndDay.keySet().stream().sorted()
                    .forEach(key -> System.out.printf("%s -> %d\n", key, byMonthAndDay.get(key)));
        }
        scanner.close();
    }
}

// Your code here

