package CodeFinki;

import java.time.LocalDateTime;
import java.util.*;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

enum COMPARATOR_TYPE {
    NEWEST_FIRST,
    OLDEST_FIRST,
    LOWEST_PRICE_FIRST,
    HIGHEST_PRICE_FIRST,
    MOST_SOLD_FIRST,
    LEAST_SOLD_FIRST
}

class ProductNotFoundException extends Exception {
    ProductNotFoundException(String message) {
        super(message);
    }
}


class Product{
    String category;
    String id;
    String name;
    LocalDateTime createdAt;
    double price;
    int quantitySold = 0;

    public Product(String category, String id, String name, LocalDateTime createdAt, double price) {
        this.category = category;
        this.id = id;
        this.name = name;
        this.createdAt = createdAt;
        this.price = price;
    }
    @Override
    public String toString() {
        return "Product{" +
                "id='" + id + '\'' +
                ", name='" + name + '\'' +
                ", createdAt=" + createdAt +
                ", price=" + price +
                ", quantitySold=" + quantitySold +
                '}';
    }

    public void setQuantitySold(int quantity) {
        quantitySold+=quantity;
    }


    public LocalDateTime getCreatedAt() {
        return createdAt;
    }

    public double getPrice() {
        return price;
    }

    public int getQuantitySold() {
        return quantitySold;
    }




}


class OnlineShop {
    HashMap<String, Product> produktByID; //(id) -> produkt
    HashMap<String, HashSet<Product>> produktByCategory;

    OnlineShop() {
        produktByID = new HashMap<>();
        produktByCategory = new HashMap<>();
    }

    void addProduct(String category, String id, String name, LocalDateTime createdAt, double price){
        Product product = new Product(category, id, name, createdAt, price);
        produktByID.put(id, product);
        if(produktByCategory.containsKey(category)){
            produktByCategory.get(category).add(product);
        }
        else{
            HashSet<Product> lista = new HashSet<>();
            lista.add(product);
            produktByCategory.put(category, lista);
        }

    }

    double buyProduct(String id, int quantity) throws ProductNotFoundException{
        if(!produktByID.containsKey(id)) throw new ProductNotFoundException("Product with id "+ id + " does not exist in the online shop!");
        produktByID.get(id).setQuantitySold(quantity);

        //go brishe od dvete mapi
//        String kategorija = produktByID.get(id).category;
//        produktByCategory.get(kategorija).remove(produktByID.get(id));
//        produktByID.remove(id);


        return produktByID.get(id).price * quantity;
    }

    List<List<Product>> listProducts(String category, COMPARATOR_TYPE comparatorType, int pageSize) {
        List<List<Product>> result = new ArrayList<>();
        Comparator<Product> comparator = null;
        switch (comparatorType){
            case NEWEST_FIRST : comparator = Comparator.comparing(Product::getCreatedAt).reversed();break;
            case OLDEST_FIRST: comparator = Comparator.comparing(Product::getCreatedAt);break;
            case MOST_SOLD_FIRST: comparator = Comparator.comparing(Product::getQuantitySold).reversed();break;
            case LEAST_SOLD_FIRST: comparator = Comparator.comparing(Product::getQuantitySold);break;
            case LOWEST_PRICE_FIRST: comparator = Comparator.comparing(Product::getPrice);break;
            case HIGHEST_PRICE_FIRST:comparator = Comparator.comparing(Product::getPrice).reversed();break;
            //default: comparator = Comparator.comparing(Product::getCreatedAt).reversed();
        }

        //category mozhe da e null
        List<Product> products = new ArrayList<>();
        if(category == null) products = produktByID.values().stream().collect(Collectors.toList());
        else products = produktByCategory.get(category).stream().collect(Collectors.toList());

        products = products.stream().sorted(comparator).collect(Collectors.toList());
  //od andonov prepisha
        if (pageSize > products.size()) {
            result.add(products);
        } else {
            int ratio = (int) Math.ceil(products.size()*1.0 / pageSize);
            List<Integer> starts = IntStream.range(0, ratio).map(i -> i * pageSize).boxed().collect(Collectors.toList());
            List<Product> finalProducts = products;
            starts.forEach(i -> result.add(finalProducts.subList(i, Math.min((i + pageSize), finalProducts.size()))));
        }
        return result;
    }

}

public class OnlineShopTest {

    public static void main(String[] args) {
        OnlineShop onlineShop = new OnlineShop();
        double totalAmount = 0.0;
        Scanner sc = new Scanner(System.in);
        String line;
        while (sc.hasNextLine()) {
            line = sc.nextLine();
            String[] parts = line.split("\\s+");
            if (parts[0].equalsIgnoreCase("addproduct")) {
                String category = parts[1];
                String id = parts[2];
                String name = parts[3];
                LocalDateTime createdAt = LocalDateTime.parse(parts[4]);
                double price = Double.parseDouble(parts[5]);
                onlineShop.addProduct(category, id, name, createdAt, price);
            } else if (parts[0].equalsIgnoreCase("buyproduct")) {
                String id = parts[1];
                int quantity = Integer.parseInt(parts[2]);
                try {
                    totalAmount += onlineShop.buyProduct(id, quantity);
                } catch (ProductNotFoundException e) {
                    System.out.println(e.getMessage());
                }
            } else {
                String category = parts[1];
                if (category.equalsIgnoreCase("null"))
                    category=null;
                String comparatorString = parts[2];
                int pageSize = Integer.parseInt(parts[3]);
                COMPARATOR_TYPE comparatorType = COMPARATOR_TYPE.valueOf(comparatorString);
                printPages(onlineShop.listProducts(category, comparatorType, pageSize));
            }
        }
        System.out.println("Total revenue of the online shop is: " + totalAmount);

    }

    private static void printPages(List<List<Product>> listProducts) {
        for (int i = 0; i < listProducts.size(); i++) {
            System.out.println("PAGE " + (i + 1));
            listProducts.get(i).forEach(System.out::println);
        }
    }
}

