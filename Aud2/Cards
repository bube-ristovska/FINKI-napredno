package cards;

public enum PlayingCardType {
    HEARTS,
    DIAMONDS,
    SPADES,
    CLUBS
}

//cards
package cards;

import java.util.Objects;

public class PlayingCard {
    private int rank;
    private  PlayingCardType type;

    public PlayingCard(int rank, PlayingCardType type) {
        this.rank = rank;
        this.type = type;
    }

    public void setRank(int rank) {
        this.rank = rank;
    }

    public void setType(PlayingCardType type) {
        this.type = type;
    }

    public int getRank() {
        return rank;
    }

    public PlayingCardType getType() {
        return type;
    }

    @Override
    public String toString() {
        return String.format("%d %s", rank, type.name()); //samata enumeracija ima .name()
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        PlayingCard that = (PlayingCard) o;
        return rank == that.rank && type == that.type;
    }

    @Override
    public int hashCode() {
        return Objects.hash(rank, type);
    }
    //kje zboruvame ponatamu za hashes
}
//whole deck
package cards;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;

public class Deck {
    private PlayingCard [] cards;
    private boolean[] isDealt;
    private int dealtTotal;

    public Deck(){
        cards = new PlayingCard[52];
        isDealt = new boolean[52];
        dealtTotal = 0;
        for(int i = 0; i < PlayingCardType.values().length;i++){ //4 vida kje vrati lenght hearts,... a shto ako se 5 ili povekje tipovi
            for(int j = 0; j < 13; j++){ //za sekoj eden od values
                cards[i*13+j] = new PlayingCard(j+2,PlayingCardType.values()[i]); //
            }
        }
    }

    public PlayingCard[] getCards() {
        return cards;
    }

    public void setCards(PlayingCard[] cards) {
        this.cards = cards;
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        Deck deck = (Deck) o;
        return Arrays.equals(cards, deck.cards);
    }

    @Override
    public int hashCode() {
        return Arrays.hashCode(cards);
    }

    @Override
    public String toString() {
        StringBuilder stringBuilder = new StringBuilder();

        for (PlayingCard card : cards){ //for each znachi :
            stringBuilder.append(card.toString());
            stringBuilder.append(("\n"));
        }
        return stringBuilder.toString();
    }

    public boolean hasCardsLeft(){
        return (cards.length - dealtTotal) > 0;
    }

    public  PlayingCard dealCard(){
        if(!hasCardsLeft()) return null;
        int card = (int) (Math.random() * 52); //vrakja random od 00 do 10
        if(!isDealt[card]){
            isDealt [card] = true;
            dealtTotal++;
            return cards[card];
        }
        return  dealCard();
    }


    public  PlayingCard[] shuffle(){
        List<PlayingCard> playingCardList = Arrays.asList(cards);
        Collections.shuffle(playingCardList);
        return cards;
    }

    public static void main(String[] args) {
        Deck deck2 = new Deck();
        deck2.shuffle();
        System.out.println(deck2);
    }

}



