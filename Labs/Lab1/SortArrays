import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.Arrays;
import java.util.Random;
import java.util.Scanner;


public class IntegerArrayTester {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String s = scanner.nextLine();
        IntegerArray ia = null;
        switch (s) {
        case "testSimpleMethods":
            ia = new IntegerArray(generateRandomArray(scanner.nextInt()));
            testSimpleMethods(ia);
            break;
        case "testConcat":
            testConcat(scanner);
            break;
        case "testEquals":
            testEquals(scanner);
            break;
        case "testSorting":
            testSorting(scanner);
            break;
        case "testReading":
            testReading(new ByteArrayInputStream(scanner.nextLine().getBytes()));
            break;
        case "testImmutability":
            int a[] = generateRandomArray(scanner.nextInt());
            ia = new IntegerArray(a);
            testSimpleMethods(ia);
            testSimpleMethods(ia);
            IntegerArray sorted_ia = ia.getSorted();
            testSimpleMethods(ia);
            testSimpleMethods(sorted_ia);
            sorted_ia.getSorted();
            testSimpleMethods(sorted_ia);
            testSimpleMethods(ia);
            a[0] += 2;
            testSimpleMethods(ia);
            ia = ArrayReader.readIntegerArray(new ByteArrayInputStream(integerArrayToString(ia).getBytes()));
            testSimpleMethods(ia);
            break;
        }
        scanner.close();
    }

    static void testReading(InputStream in) {
        IntegerArray read = ArrayReader.readIntegerArray(in);
        System.out.println(read);
    }

    static void testSorting(Scanner scanner) {
        int[] a = readArray(scanner);
        IntegerArray ia = new IntegerArray(a);
        System.out.println(ia.getSorted());
    }

    static void testEquals(Scanner scanner) {
        int[] a = readArray(scanner);
        int[] b = readArray(scanner);
        int[] c = readArray(scanner);
        IntegerArray ia = new IntegerArray(a);
        IntegerArray ib = new IntegerArray(b);
        IntegerArray ic = new IntegerArray(c);
        System.out.println(ia.equals(ib));
        System.out.println(ia.equals(ic));
        System.out.println(ib.equals(ic));
    }

    static void testConcat(Scanner scanner) {
        int[] a = readArray(scanner);
        int[] b = readArray(scanner);
        IntegerArray array1 = new IntegerArray(a);
        IntegerArray array2 = new IntegerArray(b);
        IntegerArray concatenated = array1.concat(array2);
        System.out.println(concatenated);
    }

    static void testSimpleMethods(IntegerArray ia) {
        System.out.print(integerArrayToString(ia));
        System.out.println(ia);
        System.out.println(ia.sum());
        System.out.printf("%.2f\n", ia.average());
    }


    static String integerArrayToString(IntegerArray ia) {
        StringBuilder sb = new StringBuilder();
        sb.append(ia.length()).append('\n');
        for (int i = 0; i < ia.length(); ++i)
            sb.append(ia.getElementAt(i)).append(' ');
        sb.append('\n');
        return sb.toString();
    }

    static int[] readArray(Scanner scanner) {
        int n = scanner.nextInt();
        int[] a = new int[n];
        for (int i = 0; i < n; ++i) {
            a[i] = scanner.nextInt();
        }
        return a;
    }


    static int[] generateRandomArray(int k) {
        Random rnd = new Random(k);
        int n = rnd.nextInt(8) + 2;
        int a[] = new int[n];
        for (int i = 0; i < n; ++i) {
            a[i] = rnd.nextInt(20) - 5;
        }
        return a;
    }

}

final public class IntegerArray {
    private int [] niza;
    private int n;
    public IntegerArray(int a[]) {
        this.niza = a;
        n = a.length;
    }
    public int length() {
        return this.n;
    }
    public int getElementAt(int i) {
        return this.niza[i];
    }
    public int sum() {
        int s=0;
        for (int i = 0; i < this.n; i++) {
            s+=niza[i];
        }
        return s;
    }
    public double average() {
        return (double)sum()/this.n;
    }
    public IntegerArray getSorted() {
        IntegerArray temp = new IntegerArray(niza);
        int tempNum;
        for (int i = 0; i < length()-1; i++) {
            for (int j = 0; j < length()-i-1; j++) {
                if(temp.niza[j] > temp.niza[j+1]) {
                    tempNum = temp.niza[j];
                    temp.niza[j] = temp.niza[j+1];
                    temp.niza[j+1] = tempNum;
                }
            }
        }
        return temp;
    }

    public IntegerArray concat(IntegerArray ia) {
        IntegerArray newArray = new IntegerArray(niza);
        for (int i = this.niza.length; i < ia.niza.length; i++) {
            newArray.niza[i] = ia.niza[i-ia.length()];
        }
        return newArray;
    }

    @Override
    public String toString() {
        String arrString ="[";
        for (int i = 0; i < this.n-1; i++) {
            arrString+=String.valueOf(this.niza[i]);
            arrString+=", ";
        }
        return arrString+this.niza[n-1]+"]";
    }
}

public class ArrayReader {
    public static IntegerArray readIntegerArray(InputStream input) {
        Scanner sc = new Scanner(input);
        int length = sc.nextInt();
        int[] arr = new int[length];
        for(int i = 0; i < length; i++) {
            arr[i] = sc.nextInt();
        }
        return new IntegerArray(arr);
    }
}


